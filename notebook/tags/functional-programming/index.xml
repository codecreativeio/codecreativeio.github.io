<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on CodeCreative | A ServiceNow Blog</title>
    <link>https://codecreative.io/notebook/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on CodeCreative | A ServiceNow Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://codecreative.io/notebook/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GlideRecord: Convert to JSON (Functional)</title>
      <link>https://codecreative.io/notebook/gliderecord-patterns-to-json-fp/</link>
      <pubDate>Tue, 10 Aug 2021 17:01:00 +0000</pubDate>
      
      <guid>https://codecreative.io/notebook/gliderecord-patterns-to-json-fp/</guid>
      <description>Purpose: How to write a GlideRecord loop to convert the GlideRecord to a Javascript Object or JSON Object using a Functional Programming style
Use: Use this script in a Server Script. Typically this will be used in Scripted REST Endpoint, Service Portal Widget&amp;rsquo;s Server Script, or GlideAjax Script Include. Depending on the specific place used, conversion from a Javascript Object to a JSON string may be automatic.
This technique can output either an array or an object / map depending on the intended goal.</description>
    </item>
    
    <item>
      <title>GlideRecord: Batch Update (Functional)</title>
      <link>https://codecreative.io/notebook/gliderecord-patterns-batch-update-fp/</link>
      <pubDate>Sun, 08 Aug 2021 17:01:00 +0000</pubDate>
      
      <guid>https://codecreative.io/notebook/gliderecord-patterns-batch-update-fp/</guid>
      <description>Purpose: How to write a GlideRecord loop to batch update Records in ServiceNow using a Functional Programming style
Use: Use this script in a Server Script. Typically this will be used in a Background Script, Scheduled Job, or Fix Script in order to execute a batch operation to fix records, particularly after a data import, system upgrade, or app upgrade. In the following example, a fix could be applied to every incident record and a comment added to annotate the fix.</description>
    </item>
    
    <item>
      <title>GlideRecord: If Record Exists (Functional)</title>
      <link>https://codecreative.io/notebook/gliderecord-patterns-if-record-exists-fp/</link>
      <pubDate>Sun, 08 Aug 2021 17:01:00 +0000</pubDate>
      
      <guid>https://codecreative.io/notebook/gliderecord-patterns-if-record-exists-fp/</guid>
      <description>Purpose: How to execute code conditionally if a matching record exists or is found in ServiceNow using a Functional Programming style
Use: Use this script in a Server Script to test if a record exists before deciding how the code should continue. This allows handling error cases when a record doesn&amp;rsquo;t exist, creation of expected records, or an alternate handling path depending on whether the record exists or not. The call to setLimit is extremely important to maintaining the best performance by telling the database to stop searching after finding one matching record.</description>
    </item>
    
  </channel>
</rss>
