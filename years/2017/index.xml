<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2017 on CodeCreative | A ServiceNow Blog</title>
    <link>http://example.org/years/2017/</link>
    <description>Recent content in 2017 on CodeCreative | A ServiceNow Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Sep 2017 15:30:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/years/2017/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interface Design Patterns: Function Pattern</title>
      <link>http://example.org/blog/interface-design-patterns-function-pattern/</link>
      <pubDate>Fri, 15 Sep 2017 15:30:00 +0000</pubDate>
      
      <guid>http://example.org/blog/interface-design-patterns-function-pattern/</guid>
      <description>Back to Interface Design Patterns for Script Includes
Introduction The function pattern is the simplest but also the most flexible interface design pattern for Script Includes. It is the foundation for the Revealing Module Pattern and can be used as a constructor or factory function for any of the other interface types. As a factory function, this pattern can provide a Scoped App with a flexible internal API that can easily evolve as complexity increases.</description>
    </item>
    
    <item>
      <title>Interface Design Patterns: Class Pattern</title>
      <link>http://example.org/blog/interface-design-patterns-class-pattern/</link>
      <pubDate>Thu, 07 Sep 2017 15:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/interface-design-patterns-class-pattern/</guid>
      <description>Back to Interface Design Patterns for Script Includes
Introduction The first interface design pattern for Script Includes that we will take a closer look at is the Class Pattern. The primary use case for this interface pattern is to leverage inheritance&amp;hellip; or more properly prototypal inheritance. Prototypal inheritance will allow a Script Include to inherit behaviors from another. One example of this is Script Includes that inherit from AbstractAjaxProcessor to create Glide Ajax scripts but let&amp;rsquo;s look at a custom application example.</description>
    </item>
    
    <item>
      <title>Lodash style interface for GlideRecord</title>
      <link>http://example.org/blog/lodash-style-interface-for-gliderecord/</link>
      <pubDate>Wed, 16 Aug 2017 19:56:57 +0000</pubDate>
      
      <guid>http://example.org/blog/lodash-style-interface-for-gliderecord/</guid>
      <description>Wow, I really left things hanging after the Interface Design Patterns post. The good news is that MapAnything&amp;rsquo;s next release will be amazing! And of course, I will circle back to interface design patterns. But for today, I want to take a look at the start of a library that has been a long time coming.
I love the lodash library. It&amp;rsquo;s great for working with arrays in a simplified manner.</description>
    </item>
    
    <item>
      <title>Interface Design Patterns for Script Includes</title>
      <link>http://example.org/blog/interface-design-patterns-for-script-includes/</link>
      <pubDate>Thu, 01 Jun 2017 02:51:00 +0000</pubDate>
      
      <guid>http://example.org/blog/interface-design-patterns-for-script-includes/</guid>
      <description>Almost two thirds of the customer service agents used the default browser, never questioning whether a better one was available  The Originals by Adam Grant (2016)   It should go on record that I, sometimes irrationally and against my better judgement, question all conventions, policies, and established ways of doing things. In fact, when I read the above from The Originals a couple months ago, I responded by underlining the quote and hastily scribbling around the passage &amp;ldquo;Arg!</description>
    </item>
    
    <item>
      <title>Making the HighChart Widget Reusable</title>
      <link>http://example.org/blog/making-the-highchart-widget-reusable/</link>
      <pubDate>Wed, 24 May 2017 15:38:00 +0000</pubDate>
      
      <guid>http://example.org/blog/making-the-highchart-widget-reusable/</guid>
      <description>WARNING: The use of HighCharts in this way may require the purchase of an additional license from Highsoft. Use in production at your own risk.
Read the Whole Series:
 Intro to HighCharts in Service Portal Configuring HighCharts in Service Portal Generate HighChart Data in a Widget Server Script Making the HighChart Widget Reusable (This Post)  Download the Widget
Up until now, the HighChart Widget that we&amp;rsquo;ve been working on has remained&amp;hellip; well&amp;hellip; mostly unusable.</description>
    </item>
    
    <item>
      <title>Generate HighChart Data in a Widget Server Script</title>
      <link>http://example.org/blog/generate-highchart-data-in-a-widget-server-script/</link>
      <pubDate>Wed, 17 May 2017 14:30:00 +0000</pubDate>
      
      <guid>http://example.org/blog/generate-highchart-data-in-a-widget-server-script/</guid>
      <description>WARNING: The use of HighCharts in this way may require the purchase of an additional license from Highsoft. Use in production at your own risk.
Read the Whole Series:
 Intro to HighCharts in Service Portal Configuring HighCharts in Service Portal Generate HighChart Data in a Widget Server Script (This Post) Making the HighChart Widget Reusable  Download the Widget
Up until now, we&amp;rsquo;ve only dealt with custom charts using HighCharts with hardcoded data.</description>
    </item>
    
    <item>
      <title>Configuring HighCharts in Service Portal</title>
      <link>http://example.org/blog/configuring-highcharts-in-service-portal/</link>
      <pubDate>Wed, 10 May 2017 21:37:00 +0000</pubDate>
      
      <guid>http://example.org/blog/configuring-highcharts-in-service-portal/</guid>
      <description>WARNING: The use of HighCharts in this way may require the purchase of an additional license from Highsoft. Use in production at your own risk.
Read the Whole Series:
 Intro to HighCharts in Service Portal Configuring HighCharts in Service Portal (This Post) Generate HighChart Data in a Widget Server Script Making the HighChart Widget Reusable  Download the Widget
One of the greatest points of confusion from some of my previous articles on HighCharts stems from a lack of understanding of the HighCharts API and in particular the HighCharts configuration options object.</description>
    </item>
    
    <item>
      <title>Intro to HighCharts in Service Portal</title>
      <link>http://example.org/blog/intro-to-highcharts-in-service-portal/</link>
      <pubDate>Wed, 03 May 2017 11:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/intro-to-highcharts-in-service-portal/</guid>
      <description>WARNING: The use of HighCharts in this way may require the purchase of an additional license from Highsoft. Use in production at your own risk.
Read the Whole Series:
 Intro to HighCharts in Service Portal (This Post) Configuring HighCharts in Service Portal Generate HighChart Data in a Widget Server Script Making the HighChart Widget Reusable  Download the Widget
About 2 years ago, I demonstrated how to build custom charts using HighCharts with a UI Page and kicked off what would eventually become Code Creative.</description>
    </item>
    
    <item>
      <title>Eliminate Unnecessary Queries With This Simple Check</title>
      <link>http://example.org/blog/eliminate-unnecessary-queries-with-this-simple-check/</link>
      <pubDate>Wed, 26 Apr 2017 23:51:00 +0000</pubDate>
      
      <guid>http://example.org/blog/eliminate-unnecessary-queries-with-this-simple-check/</guid>
      <description>When I first write a script include to manipulate a GlideRecord, I usually script it to accept a sys_id or other query criteria as a parameter. Its the obvious first step, the GlideRecord has to be retrieved to manipulate it after all. Take this guy for example:
var Test = Class.create(); Test.prototype = { initialize: function() { }, doSomethingAwesome: function(id) { var gr = new GlideRecord(&amp;#39;incident&amp;#39;); if (gr.get()) { // Something awesome gets done here  } }, type: &amp;#39;Test&amp;#39; };  The more I use the script, though, the more likely I am to run into a scenario where I already have the GlideRecord queried from another script.</description>
    </item>
    
    <item>
      <title>Let&#39;s Grab a Drink at Knowledge 17</title>
      <link>http://example.org/blog/lets-grab-a-drink-at-knowledge-17/</link>
      <pubDate>Fri, 14 Apr 2017 16:35:02 +0000</pubDate>
      
      <guid>http://example.org/blog/lets-grab-a-drink-at-knowledge-17/</guid>
      <description>Whether you want to ask me a question in person, discuss Service Portal and custom applications, learn more about my work at MapAnything, discuss a business opportunity, or just chat and enjoy some pleasant company let me know. It&amp;rsquo;s better than hoping we haphazardly stumble on one another. If you&amp;rsquo;re interested, fill out the form below so I can work out a time to meet with you.
Also don&amp;rsquo;t forget to swing by the MapAnything booth!</description>
    </item>
    
    <item>
      <title>A Layman&#39;s Guide to Nested GlideRecords</title>
      <link>http://example.org/blog/a-laymans-guide-to-nested-gliderecords/</link>
      <pubDate>Thu, 13 Apr 2017 15:30:01 +0000</pubDate>
      
      <guid>http://example.org/blog/a-laymans-guide-to-nested-gliderecords/</guid>
      <description>My previous articles on the Nested GlideRecord issue were far more technical than I usually try to achieve. After all, if I can&amp;rsquo;t explain it simply enough then I probably don&amp;rsquo;t understand it well myself. With that in mind, I would like to revisit Nested GlideRecords, how they cause performance problems, and why database indexing alone isn&amp;rsquo;t the best solution&amp;hellip; this time with a little more simplicity.
And a parable!</description>
    </item>
    
    <item>
      <title>Avoid the Style Tag in Service Portal Widgets</title>
      <link>http://example.org/blog/avoid-the-style-tag-in-service-portal-widgets/</link>
      <pubDate>Wed, 12 Apr 2017 14:41:36 +0000</pubDate>
      
      <guid>http://example.org/blog/avoid-the-style-tag-in-service-portal-widgets/</guid>
      <description>Warning: This article is an example of what not to do. Avoid using these practices in your ServiceNow instance.
Previously, we built a widget with configurable CSS styles and I briefly mentioned that using the &amp;lt;style&amp;gt; tag wasn&amp;rsquo;t a great idea. I want to revisit that thought and explore some of the problems that you might encounter when using the &amp;lt;style&amp;gt; tag in a Service Portal Widget. I will use the colored square widget again to demonstrate.</description>
    </item>
    
    <item>
      <title>Intro to Configurable Styles for Service Portal Widgets</title>
      <link>http://example.org/blog/intro-to-configurable-styles-for-service-portal-widgets/</link>
      <pubDate>Fri, 07 Apr 2017 13:08:00 +0000</pubDate>
      
      <guid>http://example.org/blog/intro-to-configurable-styles-for-service-portal-widgets/</guid>
      <description>Note: This article assumes a basic working knowledge of Service Portal Designer, Service Portal Widget development, and the Widget Editor.
In my Service Portal CSS Best Practices post, I mentioned that as widget developers we should avoid hardcoding colors and use CSS variables to allow overriding default styles. Sometimes we want to take this idea to the next level by allowing portal admins to configure the look and feel of widgets without touching code at all.</description>
    </item>
    
    <item>
      <title>6 Best Practices for Service Portal CSS</title>
      <link>http://example.org/blog/6-best-practices-for-service-portal-css/</link>
      <pubDate>Wed, 22 Mar 2017 17:30:00 +0000</pubDate>
      
      <guid>http://example.org/blog/6-best-practices-for-service-portal-css/</guid>
      <description>When developing Service Portal styles for either the Theme or the Widgets, there is more to think about than there used to be in CMS. Service Portal offers greater modularity to protect our Widgets from our Themes and vice versa. Below are 6 best practices (they&amp;rsquo;re more what you&amp;rsquo;d call guidelines than actual rules) to follow when coding the CSS for your Service Portal to keep your CSS maintainable and flexible.</description>
    </item>
    
    <item>
      <title>GlideRecord Full Text Search Explained</title>
      <link>http://example.org/blog/gliderecord-full-text-search-explained/</link>
      <pubDate>Tue, 14 Mar 2017 21:36:29 +0000</pubDate>
      
      <guid>http://example.org/blog/gliderecord-full-text-search-explained/</guid>
      <description>After posting last week&amp;rsquo;s GlideRecord Full Text Search article using 123TEXTQUERY321, Jeff Pierce reached out and reminded me of a better way of doing it using IR_AND_OR_QUERY. So special thanks to him for helping to clear this up!
I have since updated my previous article to this approach but I wanted to take a moment to dive into the multiple methods of Full Text Search and their differences.
IR_AND_QUERY   IR_AND_QUERY Results   Behind the scenes, the method previously demonstrated (123TEXTQUERY321) behaves in the same way as using IR_AND_QUERY.</description>
    </item>
    
    <item>
      <title>How To Do Full Text Search With GlideRecord</title>
      <link>http://example.org/blog/how-to-do-full-text-search-with-gliderecord/</link>
      <pubDate>Wed, 08 Mar 2017 20:53:00 +0000</pubDate>
      
      <guid>http://example.org/blog/how-to-do-full-text-search-with-gliderecord/</guid>
      <description>UPDATE: After posting this article, Jeff Pierce reminded me of a better way than the original 123TEXTQUERY321 approach. I have since updated the scripts and article here and provided a deeper explanation in another article.
When looking at the form filters in ServiceNow, I think all admins and developers reach a point where we start to wonder &amp;ldquo;How do I search Keywords in my scripts?&amp;rdquo; After all, that full text search using &amp;ldquo;for text&amp;rdquo; or the &amp;ldquo;Keywords&amp;rdquo; filter is so tantalizing for any custom CMS / Service Portal search feature.</description>
    </item>
    
    <item>
      <title>GlideAjax Troubleshooting Guide</title>
      <link>http://example.org/blog/glideajax-troubleshooting-guide/</link>
      <pubDate>Thu, 02 Mar 2017 17:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/glideajax-troubleshooting-guide/</guid>
      <description>After my Demystifying GlideAjax infographic I always meant to go back and write a GlideAjax troubleshooting guide. Both troubleshooting my own scripts and helping folks on the ServiceNow Community, I run into the same mistakes over and over and over again. And in spite of making the same mistakes, and eventually stumbling across the same solutions, I&amp;rsquo;ve (shamefully) never quite refined my troubleshooting process on this one. I&amp;rsquo;m pretty sure if I forget sysparm_name in my Client Script again, ServiceNow is going to send people to my door to reclaim my ServiceNow certificates until I go through remediation training.</description>
    </item>
    
    <item>
      <title>3 Ways CSS Widget Scopes Affect Service Portal CSS</title>
      <link>http://example.org/blog/3-ways-css-widget-scopes-affect-service-portal-css/</link>
      <pubDate>Wed, 22 Feb 2017 18:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/3-ways-css-widget-scopes-affect-service-portal-css/</guid>
      <description>Previously, we looked at CSS Widget Scopes in Service Portal. This change in how CSS is applied in Service Portal has a few implications for developers that we need to keep in mind when developing widgets and themes.
1. Widget styles are protected from other widget styles This one should go without saying from the previous article but a widget&amp;rsquo;s CSS will only affect widget instances of that type. Each widget has its own prefixed CSS identifier which appears to be the letter &amp;ldquo;v&amp;rdquo; followed by the sys_id of the widget record, in case you are wondering.</description>
    </item>
    
    <item>
      <title>What are CSS Widget Scopes in Service Portal?</title>
      <link>http://example.org/blog/what-are-css-widget-scopes-in-service-portal/</link>
      <pubDate>Wed, 15 Feb 2017 17:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/what-are-css-widget-scopes-in-service-portal/</guid>
      <description>Scoped CSS Screenshot from CanIUse.com   Service Portal as a Content Management System has introduced something that now seems like an obvious oversight in all other CMS applications. In fact, its such a obvious, painful oversight that countless others have attempted some sort of solution. CSS Preprocessors, the HTML5 spec, and the recent CSS and JS specs all introduced scoped concepts such as a scoped attribute, scope pseudo selector, and scoping capability with Shadow DOM most of which was promptly ignored by browsers and removed from spec.</description>
    </item>
    
    <item>
      <title>Istanbul CMS iFrames Are Missing Theme CSS</title>
      <link>http://example.org/blog/istanbul-cms-iframes-are-missing-theme-css/</link>
      <pubDate>Thu, 09 Feb 2017 01:08:00 +0000</pubDate>
      
      <guid>http://example.org/blog/istanbul-cms-iframes-are-missing-theme-css/</guid>
      <description>UPDATE (04/09/2017): This issue appears to be fixed in Istanbul Patch 3
If your organization is using CMS and you are considering upgrading to Istanbul, be on the lookout for a potential issue. Theme CSS styles may not be applied to iFrame content in the CMS for some instances after upgrading to Istanbul. ServiceNow is already looking into the issue so hopefully we will have a resolution soon but I know of a few instances out there that might find this to be a deal breaker for an upgrade so I thought it best to advise the Community.</description>
    </item>
    
    <item>
      <title>Flexbox Layouts in Service Portal (Video)</title>
      <link>http://example.org/blog/flexbox-layouts-in-service-portal/</link>
      <pubDate>Wed, 08 Feb 2017 17:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/flexbox-layouts-in-service-portal/</guid>
      <description>One of the lesser known features of Service Portal is that you can entirely ditch the Bootstrap grid layout. Technically, this opens up the ability to use Flexbox based layouts. But as some in the Community have found out first hand, using Flexbox as a Bootstrap alternative in Service Portal is not quite as straightforward as it seems.
Most of the &amp;ldquo;problem&amp;rdquo; rests in Flexbox&amp;rsquo;s simplicity. Using only a simple containing div around a set of item divs, Flexbox can achieve many layouts via CSS.</description>
    </item>
    
    <item>
      <title>3 Strategies To Fix Nested GlideRecords</title>
      <link>http://example.org/blog/3-strategies-to-fix-nested-gliderecords/</link>
      <pubDate>Wed, 01 Feb 2017 17:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/3-strategies-to-fix-nested-gliderecords/</guid>
      <description>Previously, I talked about Nested GlideRecords in scripts and the performance impact they can have on your applications. Being able to identify these miscreants is great but we really need to get them out of any mission critical scripts where they are slowing down response times. Here are a couple strategies to kick those GlideRecords out of the nest and to teach them to fly.
1. Array Flattened GlideRecord Normally, in a Nested GlideRecord, you run a GlideRecord query for each record in the result of the first GlideRecord.</description>
    </item>
    
    <item>
      <title>4 Things to Do Before Building a Service Portal</title>
      <link>http://example.org/blog/4-things-to-do-before-building-a-service-portal/</link>
      <pubDate>Wed, 25 Jan 2017 17:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/4-things-to-do-before-building-a-service-portal/</guid>
      <description>But at the end of the day, if you have a form with 100 fields that are all mandatory to be filled out before a Catalog Item can be submitted, that’s not a [Service Portal] issue.  Matt Metten   This. Read that. All of that. YES! (&amp;ldquo;I love quick time harch.&amp;rdquo;) I read that, I clicked endorse, then I wrote this. So go read that.
I have spent quite a bit of my time evangelizing Service Portal as well.</description>
    </item>
    
    <item>
      <title>Nested GlideRecords Are Killing Your App Performance</title>
      <link>http://example.org/blog/nested-gliderecords-are-killing-your-app-performance/</link>
      <pubDate>Wed, 18 Jan 2017 17:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/nested-gliderecords-are-killing-your-app-performance/</guid>
      <description>In a troubleshooting conversation with a couple of my teammates, I realized that I take GlideRecord (and its partner GlideAggregate) for granted. When you make that simple gr.query() call, what happens? What SQL does it run? What does the real underlying table structure look like? Are there indexes? Are additional queries run when you dot walk? Does any of this hit a cache? How does the cache work? Where are the optimizations under the hood?</description>
    </item>
    
  </channel>
</rss>