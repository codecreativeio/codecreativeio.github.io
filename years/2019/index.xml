<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019 on CodeCreative | A ServiceNow Blog</title>
    <link>https://codecreative.io/years/2019/</link>
    <description>Recent content in 2019 on CodeCreative | A ServiceNow Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 May 2019 16:57:50 +0000</lastBuildDate>
    
	<atom:link href="https://codecreative.io/years/2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Are Extension Points Worth It</title>
      <link>https://codecreative.io/blog/are-extension-points-worth-it/</link>
      <pubDate>Sat, 04 May 2019 16:57:50 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/are-extension-points-worth-it/</guid>
      <description>One of the features that most intrigued me in ServiceNow&amp;rsquo;s London release was Extension Points. Unfortunately, I wasn&amp;rsquo;t doing a whole lot of custom app development in London, so that intrigue was left on the bench. Recently, though, I&amp;rsquo;ve been doing a little more app development and starting exploring this new feature and finding myself at a cross-roads:
Do I switch to Extension Points or keep using my tried and true methods?</description>
    </item>
    
    <item>
      <title>Service Portal CSS Order of Precedence</title>
      <link>https://codecreative.io/blog/service-portal-css-order-of-precedence/</link>
      <pubDate>Sun, 21 Apr 2019 17:55:11 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/service-portal-css-order-of-precedence/</guid>
      <description>In my work on the Getting Started with Service Portal Guide, I decided to include some information on the order the CSS is processed but truth be told I wasn&amp;rsquo;t 100% certain on it myself. Naturally I hit up the ServiceNow Docs and came across the following image:
  Not Entirely Accurate Hierarchy of style application in the Service Portal   Using that as a basis, I began writing an article on the process.</description>
    </item>
    
    <item>
      <title>Is GlideRecord getValue the King of the String</title>
      <link>https://codecreative.io/blog/is-gliderecord-getvalue-the-king-of-the-string/</link>
      <pubDate>Sun, 31 Mar 2019 21:38:31 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/is-gliderecord-getvalue-the-king-of-the-string/</guid>
      <description>King of the String This article will be long, so here&amp;rsquo;s as quick a synopsis as I can muster. In order to determine if getValue is truly a best practice superior to other GlideRecord field string coercions, I collected and analyzed 278,738 data samples from ServiceNow records in the global scope of a Madrid Personal Developer Instance and compared the resulting types and values of 5 different methods:
 GlideRecord getValue (gr.</description>
    </item>
    
    <item>
      <title>Prepare Your Import Sets for Rollback</title>
      <link>https://codecreative.io/blog/prepare-your-import-sets-for-rollback/</link>
      <pubDate>Thu, 28 Feb 2019 08:42:07 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/prepare-your-import-sets-for-rollback/</guid>
      <description>Few things are worse than performing a bulk import of data into ServiceNow only to realize you got something horribly wrong in the Transform Map. With a well planned coalesce, this often won&amp;rsquo;t create an issue since you can just reimport and overwrite. But sometimes things don&amp;rsquo;t go as planned and we need the nuclear option. Up until this point, I am still unaware of any baseline method of rollback for import sets.</description>
    </item>
    
    <item>
      <title>ServiceNow Salary Survey - Nelson Frank</title>
      <link>https://codecreative.io/blog/servicenow-salary-survey-nelson-frank/</link>
      <pubDate>Mon, 11 Feb 2019 09:48:29 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/servicenow-salary-survey-nelson-frank/</guid>
      <description>This week I am excited to bring back Michael Green to discuss Nelson Frank&amp;rsquo;s first market trends and salary survey report. Whenever I talk to Michael or his team I end up discussing market trends, which locations are hot for ServiceNow, and how salaries are trending. I love sharing insights with the team at Nelson Frank, especially since most online tools have a hard time differentiating between the general IT market and the ServiceNow niche.</description>
    </item>
    
    <item>
      <title>Goodbye Mac, Hello Surface Book 2</title>
      <link>https://codecreative.io/blog/goodbye-mac-hello-surface-book-2/</link>
      <pubDate>Wed, 23 Jan 2019 07:20:12 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/goodbye-mac-hello-surface-book-2/</guid>
      <description>One month ago, I switched from a MacBook Pro with Touchbar to Surface Book 2. Short of a miracle, I won&amp;rsquo;t likely be going back any time soon.
Why switch? My wife and I have owned Apple devices exclusively since 2012 when she got her first MacBook Pro. Since then, we&amp;rsquo;ve at some point owned pretty much everything: MacBook Air, the new MacBook, MacBook Pro, MacBook Pro with Touchbar, 27&amp;rdquo; iMac, iPads, iPad Pros, iPhones, and heck even our router is the Airport Extreme.</description>
    </item>
    
    <item>
      <title>React Component in Service Portal</title>
      <link>https://codecreative.io/blog/react-component-in-service-portal/</link>
      <pubDate>Tue, 22 Jan 2019 14:16:59 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/react-component-in-service-portal/</guid>
      <description>So once again I am hearing rumors that React may be coming to Service Portal. I know many folks who were upset with the use of AngularJS in Service Portal and even with the general lack of modern frameworks built into ServiceNow. But what if the future was now (thanks to science)?
Well, today I spent some time at lunch exploring that possibility and it turns out React may have been able to work within Service Portal just fine all along.</description>
    </item>
    
    <item>
      <title>What&#39;s In Store For 2019</title>
      <link>https://codecreative.io/blog/whats-in-store-for-2019/</link>
      <pubDate>Fri, 18 Jan 2019 11:30:11 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/whats-in-store-for-2019/</guid>
      <description>This year has already kicked off strong and there is a lot that is in the works! Here&amp;rsquo;s a few things you can expect and a few things I am considering on CodeCreative in 2019.
Hugo, We Go! The first big change of 2019 for CodeCreative was a migration from SquareSpace to a Hugo static site. SquareSpace is great if you use their themes but unfortunately I used a custom theme for CodeCreative.</description>
    </item>
    
    <item>
      <title>Interface Design Patterns: Revealing Module Pattern</title>
      <link>https://codecreative.io/blog/interface-design-patterns-revealing-module-pattern/</link>
      <pubDate>Thu, 17 Jan 2019 19:40:38 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/interface-design-patterns-revealing-module-pattern/</guid>
      <description>Back to Interface Design Patterns for Script Includes
Introduction The Revealing Module pattern can easily imitate either the Class Pattern or the Namespace Pattern with the added advantage of private state and private functions. This is most helpful in Scoped Applications where the app developer may prefer to keep implementation details hidden while exposing clear public interfaces. But it can also be used to help maintain clear API boundaries over time where traditional Javascript classes and objects would tend towards bloat.</description>
    </item>
    
    <item>
      <title>Interface Design Patterns: Global Include Pattern</title>
      <link>https://codecreative.io/blog/interface-design-patterns-global-include-pattern/</link>
      <pubDate>Tue, 15 Jan 2019 19:23:43 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/interface-design-patterns-global-include-pattern/</guid>
      <description>Back to Interface Design Patterns for Script Includes
Introduction The Global Include pattern is simply a way of running a script file held in a Script Include. It is an odd, powerful, and potentially dangerous tool that allows for many different purposes from leveraging external javascript libraries to importing a collection of functions into the global scope, to monkey patching.
One of the most useful purposes is monkey patching which allows us to modify behaviors of existing Script Includes and even ServiceNow provided classes.</description>
    </item>
    
    <item>
      <title>Interface Design Patterns: Namespace Pattern</title>
      <link>https://codecreative.io/blog/interface-design-patterns-namespace-pattern/</link>
      <pubDate>Tue, 15 Jan 2019 18:51:14 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/interface-design-patterns-namespace-pattern/</guid>
      <description>Back to Interface Design Patterns for Script Includes
Introduction The namespace pattern provides a simple mechanism for organizing reusable functions and objects. One of the challenging aspects of using alternative Script Include patterns is that they become harder to identify when used. For example, if I use the Function Pattern in a Business Rule it may be challenging for other developers to quickly identify that getMyTeamMembers() refers to a Script Include instead of a function defined in the script or a Global Business Rule.</description>
    </item>
    
  </channel>
</rss>