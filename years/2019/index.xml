<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019 on CodeCreative | A ServiceNow Blog</title>
    <link>https://codecreative.io/years/2019/</link>
    <description>Recent content in 2019 on CodeCreative | A ServiceNow Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Jan 2019 19:40:38 +0000</lastBuildDate>
    
	<atom:link href="https://codecreative.io/years/2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interface Design Patterns: Revealing Module Pattern</title>
      <link>https://codecreative.io/blog/interface-design-patterns-revealing-module-pattern/</link>
      <pubDate>Thu, 17 Jan 2019 19:40:38 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/interface-design-patterns-revealing-module-pattern/</guid>
      <description>Back to Interface Design Patterns for Script Includes
Introduction The Revealing Module pattern can easily imitate either the Class Pattern or the Namespace Pattern with the added advantage of private state and private functions. This is most helpful in Scoped Applications where the app developer may prefer to keep implementation details hidden while exposing clear public interfaces. But it can also be used to help maintain clear API boundaries over time where traditional Javascript classes and objects would tend towards bloat.</description>
    </item>
    
    <item>
      <title>Interface Design Patterns: Global Include Pattern</title>
      <link>https://codecreative.io/blog/interface-design-patterns-global-include-pattern/</link>
      <pubDate>Tue, 15 Jan 2019 19:23:43 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/interface-design-patterns-global-include-pattern/</guid>
      <description>Back to Interface Design Patterns for Script Includes
Introduction The Global Include pattern is simply a way of running a script file held in a Script Include. It is an odd, powerful, and potentially dangerous tool that allows for many different purposes from leveraging external javascript libraries to importing a collection of functions into the global scope, to monkey patching.
One of the most useful purposes is monkey patching which allows us to modify behaviors of existing Script Includes and even ServiceNow provided classes.</description>
    </item>
    
    <item>
      <title>Interface Design Patterns: Namespace Pattern</title>
      <link>https://codecreative.io/blog/interface-design-patterns-namespace-pattern/</link>
      <pubDate>Tue, 15 Jan 2019 18:51:14 +0000</pubDate>
      
      <guid>https://codecreative.io/blog/interface-design-patterns-namespace-pattern/</guid>
      <description>Back to Interface Design Patterns for Script Includes
Introduction The namespace pattern provides a simple mechanism for organizing reusable functions and objects. One of the challenging aspects of using alternative Script Include patterns is that they become harder to identify when used. For example, if I use the Function Pattern in a Business Rule it may be challenging for other developers to quickly identify that getMyTeamMembers() refers to a Script Include instead of a function defined in the script or a Global Business Rule.</description>
    </item>
    
  </channel>
</rss>